// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  email              String                @unique
  phone              String?
  username           String                @unique
  avatar             String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  tasks              Task[]
  workspaces         Workspace[]
  templates          Template[]
  memberOfWorkspaces MembersOnWorkspaces[]
  membersOfTasks     MembersOnTasks[]
  apiKeys            ApiKey[]

  @@map("users")
}

model Workspace {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String                @unique
  owner               User                  @relation(fields: [ownerId], references: [id])
  ownerId             String                @db.ObjectId
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  private             Boolean?
  membersOnWorkspaces MembersOnWorkspaces[]
  tasks               Task[]
  membersOnTasks      MembersOnTasks[]

  @@map("workspaces")
}

enum Role {
  Owner
  Reader
  Writer
}

enum InviteStatus {
  Pending
  Accepted
  Rejected
}

model MembersOnWorkspaces {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  role        Role
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.ObjectId
  status      InviteStatus @default(Pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("members_on_workspaces")
}

enum ChatRole {
  System
  User
  Assistant
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  document    String?
  prompt      String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.ObjectId
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String    @db.ObjectId
  template    Template? @relation(fields: [templateId], references: [id])
  templateId  String?   @db.ObjectId
  private     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("tasks")
}

model MembersOnTasks {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  role        Role
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.ObjectId
  status      InviteStatus @default(Pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("members_on_tasks")
}

model Template {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  document    String?
  prompt      String?
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String   @db.ObjectId
  private     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]

  @@map("templates")
}

enum Provider {
  OpenAI
  Cohere
}

model ApiKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  provider  Provider
  title     String
  value     String
  hint      String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api-keys")
}
