// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  email              String                @unique
  phone              String?
  username           String                @unique
  avatar             String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  teams              Team[]
  tasks              Task[]
  workspaces         Workspace[]
  templates          Template[]
  memberOfWorkspaces MembersOnWorkspaces[]
  memberOfTeams      MembersOnTeams[]
  membersOfTemplates MembersOnTemplates[]
  membersOfTasks     MembersOnTasks[]
  apiKeys            ApiKey[]
  userCredits        UserCredit[]
  executionHistories ExecutionHistory[]

  @@map("users")
}

model Workspace {
  id        String                @id @default(auto()) @map("_id") @db.ObjectId
  name      String                @unique
  owner     User                  @relation(fields: [ownerId], references: [id])
  ownerId   String                @db.ObjectId
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  teams     Team[]
  members   MembersOnWorkspaces[]
  plan      Plan                  @relation(fields: [planId], references: [id])
  planId    String                @db.ObjectId

  @@map("workspaces")
}

model Team {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  owner              User                 @relation(fields: [ownerId], references: [id])
  ownerId            String               @db.ObjectId
  workspace          Workspace            @relation(fields: [workspaceId], references: [id])
  workspaceId        String               @db.ObjectId
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  members            MembersOnTeams[]
  membersOnTasks     MembersOnTasks[]
  membersOnTemplates MembersOnTemplates[]
  teamCredits        TeamCredit[]
  executionHistories ExecutionHistory[]

  @@map("teams")
}

enum Role {
  Owner
  Reader
  Viewer
}

enum InviteStatus {
  Pending
  Accepted
  Rejected
}

model MembersOnWorkspaces {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  role        Role
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.ObjectId
  status      InviteStatus @default(Pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("members_on_workspaces")
}

model MembersOnTeams {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  role      Role
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  team      Team         @relation(fields: [teamId], references: [id])
  teamId    String       @db.ObjectId
  status    InviteStatus @default(Pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("members_on_teams")
}

enum ChatRole {
  System
  User
  Assistant
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  document    String?
  prompt      String?
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String   @db.ObjectId
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String   @db.ObjectId
  private     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tasks")
}

model MembersOnTasks {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  role      Role
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  task      Team         @relation(fields: [taskId], references: [id])
  taskId    String       @db.ObjectId
  status    InviteStatus @default(Pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("members_on_tasks")
}

model Template {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  name        String               @unique
  description String?
  document    String?
  prompt      String?
  owner       User                 @relation(fields: [ownerId], references: [id])
  ownerId     String               @db.ObjectId
  private     Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  tasks       Task[]
  members     MembersOnTemplates[]

  @@map("templates")
}

model MembersOnTemplates {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  role       Role
  user       User         @relation(fields: [userId], references: [id])
  userId     String       @db.ObjectId
  template   Template     @relation(fields: [templateId], references: [id])
  templateId String       @db.ObjectId
  team       Team?        @relation(fields: [teamId], references: [id])
  teamId     String?      @db.ObjectId
  status     InviteStatus @default(Pending)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("members_on_templates")
}

enum Provider {
  OpenAI
  Cohere
}

model ApiKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  provider  Provider
  title     String
  value     String
  hint      String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api-keys")
}

model TeamCredit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  credit    Int      @default(0)
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_credits")
}

model UserCredit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  credit    Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_credits")
}

enum ExecutionStatus {
  Success
  Failure
  Running
}

model ExecutionHistory {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  elapsed   Int             @default(0)
  token     Int
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @db.ObjectId
  task      Team            @relation(fields: [taskId], references: [id])
  taskId    String          @db.ObjectId
  status    ExecutionStatus @default(Running)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("execution_histories")
}

model Plan {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       String
  credit      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspaces  Workspace[]

  @@map("plans")
}
