// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken") @db.String
  access_token      String?  @map("accessToken") @db.String
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken") @db.String
  session_state     String?  @map("sessionState")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, token])
  @@map("verification_tokens")
}

model User {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  email              String                @unique
  emailVerified      DateTime?
  password           String
  salt               String
  username           String                @unique
  phone              String?
  avatar             String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  tasks              Task[]
  workspaces         Workspace[]
  memberOfWorkspaces MembersOnWorkspaces[]
  membersOfTasks     MembersOnTasks[]
  membersOnTeams     MembersOnTeams[]
  apiKeys            ApiKey[]
  teams              Team[]
  filterSettings     FilterSetting[]
  accounts           Account[]
  sessions           Session[]
  tags               Tag[]
  executionHistories ExecutionHistory[]

  @@map("users")
}

model Workspace {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String                @unique
  slug                String                @unique
  owner               User                  @relation(fields: [ownerId], references: [id])
  ownerId             String                @db.ObjectId
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  private             Boolean?
  membersOnWorkspaces MembersOnWorkspaces[]
  membersOnTasks      MembersOnTasks[]
  membersOnTeams      MembersOnTeams[]
  tasks               Task[]
  teams               Team[]
  filterSettings      FilterSetting[]

  @@map("workspaces")
}

enum Role {
  Owner
  Admin
  Reader
  Writer
  Public
}

enum InviteStatus {
  Pending
  Accepted
  Rejected
}

model MembersOnWorkspaces {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  role        Role
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.ObjectId
  status      InviteStatus @default(Pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  team        Team?        @relation(fields: [teamId], references: [id])
  teamId      String?      @db.ObjectId

  @@unique([workspaceId, userId])
  @@map("members_on_workspaces")
}

enum ChatRole {
  System
  User
  Assistant
}

model Provider {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Model     Model[]
  ApiKey    ApiKey[]

  @@map("providers")
}

type ModelPricing {
  price  Float
  unit   String
  tokens Int
}

type ModelUptime {
  uptime Float
  unit   String
}

model Model {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  provider   Provider @relation(fields: [providerId], references: [id])
  providerId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  name          String       @unique
  description   String
  context       Int
  pricing       String
  inputPricing  ModelPricing
  outputPricing ModelPricing
  uptime        ModelUptime

  @@map("models")
}

model Parameter {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  taskRevision   Task     @relation(fields: [taskRevisionId], references: [id])
  taskRevisionId String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  name             String
  model            String
  temperature      Float
  maxTokens        Int
  stopSequences    String[]
  topP             Float
  frequencyPenalty Float
  presencePenalty  Float
  extra            Json?

  @@map("parameters")
}

type Message {
  role    ChatRole
  content String
}

model Task {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String             @unique
  version            String
  description        String             @default("")
  document           String?
  messages           Message[]
  functions          String[] // TODO: improve later
  draft              Boolean            @default(true)
  workspace          Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId        String             @db.ObjectId
  owner              User               @relation(fields: [ownerId], references: [id])
  ownerId            String             @db.ObjectId
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  membersOnTasks     MembersOnTasks[]
  parameters         Parameter[]
  tags               Tag[]
  executionHistories ExecutionHistory[]

  @@unique([slug, version])
  @@unique([name, workspaceId])
  @@map("task")
}

enum ExecutionStatus {
  Pending
  Running
  Completed
  Failed
}

enum Endpoint {
  Playground
  Production
  API
}

type Usage {
  promptTokens     Int
  completionTokens Int
}

// TODO: this table should only available for PRO users. For normal users, it is only available in 3 days
model ExecutionHistory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  taskRevision   Task     @relation(fields: [taskRevisionId], references: [id])
  taskRevisionId String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  executedBy     User     @relation(fields: [executedById], references: [id])
  executedById   String   @db.ObjectId
  endpoint       Endpoint

  elapsedMs Int
  status    ExecutionStatus
  messages  Message[]
  paramter  Json
  output    String
  usage     Usage

  @@map("execution_histories")
}

model Tag {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  taskRevision   Task     @relation(fields: [taskRevisionId], references: [id])
  taskRevisionId String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  name        String @unique
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @db.ObjectId

  @@map("tags")
}

model MembersOnTasks {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  role        Role
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?      @db.ObjectId
  team        Team?        @relation(fields: [teamId], references: [id])
  teamId      String?      @db.ObjectId
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.ObjectId
  status      InviteStatus @default(Pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  task        Task         @relation(fields: [taskId], references: [id])
  taskId      String       @db.ObjectId

  @@map("members_on_tasks")
}

model ApiKey {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  provider   Provider @relation(fields: [providerId], references: [id])
  providerId String   @db.ObjectId
  title      String
  value      String
  hint       String
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("api_keys")
}

model FilterSetting {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String    @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  setting     String

  @@map("filter_settings")
}

model Team {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  slug                String
  description         String
  workspace           Workspace             @relation(fields: [workspaceId], references: [id])
  workspaceId         String                @db.ObjectId
  owner               User                  @relation(fields: [ownerId], references: [id])
  ownerId             String                @db.ObjectId
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  membersOnTasks      MembersOnTasks[]
  membersOnWorkspaces MembersOnWorkspaces[]
  membersOnTeams      MembersOnTeams[]

  @@unique([slug, workspaceId])
  @@map("teams")
}

enum TeamRole {
  Owner
  Member
  Admin
}

model MembersOnTeams {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  role        TeamRole
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  team        Team         @relation(fields: [teamId], references: [id])
  teamId      String       @db.ObjectId
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.ObjectId
  status      InviteStatus @default(Pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("members_on_teams")
}
